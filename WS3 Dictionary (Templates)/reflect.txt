1- When the compiler is generating the code it does not generate code for templated classes, instead, it does it when they are being instantiated. And when these concrete classes are instantiated, the compiler needs access to the entire implementation in order to create the appropriate data members and methods. If these methods were in a cpp file, during the instantiation process the compiler wouldn't be able to access them, which could lead to linker errors.

2- operator== --it was necessary to add this method to ensure that the comparison was being done appropriately for the members of the Dictionary data type.

display --it was necessary to add this member to ensure that the formatting was done accordingly to specifications, also, in the Dictionary data type, we had an array of a class that each member had 2 items to be printed, term and definition, whereas the other data types only had one. so again to print them according to how they are structured I'd need a specific function.

Our first push() method on the UniqueQueue was checking for equality in a very precise way, that is, if 455 was equal to 455, or if dome was equal to dome, then these items were considered repeated. Because of how many decimals doubles can have we must determine the degree of accuracy that we need from our code to check, and we specialized the push() method to define this accuracy to .005

The two classes variable we have in this workshop, curentSize and emptyObj are defined outside the class definition because these variables will only be initialized once per instantiation type. That means that if we instantiate an integer version of our class, Queue<int, 10> inst1 and later instantiate a double Queue<double, 10> inst2, we now have these classes variables initialized twice, one for int and one for double. If after that we decide to instantiate other objects for these classes such as Queue<int, 10> inst3 and Queue<double, 10> inst4, we still have only 2 initializations for these class members as they are type-specific so I  still have one for double and one for int. 