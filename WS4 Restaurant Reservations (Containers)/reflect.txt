On the implementation of a composition, a class is strongly associated with another class. The composed class even manages the resources of the component class, and once the composed class dies, the objects of other classes that are in them also must be destroyed.
On the other hand, aggregation is a weaker relationship between classes, and in aggregation, the aggregate class does not control the resources of the aggregated class. Once the aggregate class is destroyed, the aggregated class can continue to exist without any effect on its objects.
In our workshop, for example, the Restaurant is composed of reservations, and once a restaurant object is destroyed, all reservations in that restaurant are destroyed along with it (composition example). On the other hand, our ConfirmationSender class is pointing to the reservations, but they are independent. Even if we destroy our ConfirmationSender class, the reservations will continue to exist (aggregation class).

The difference between a copy and move function is that because in the composition class, the composed class manages the resources of the component class, it also must ensure that they are properly deallocated to avoid memory leaks during the process, as well as perform a deep copy of the object that they are copying. In an associated class, because there is no such strong relation between classes, it suffices to only do a shallow copy of the addresses of the members of the class we are copying from, and their resources will be managed later on by whichever class is responsible for doing so.