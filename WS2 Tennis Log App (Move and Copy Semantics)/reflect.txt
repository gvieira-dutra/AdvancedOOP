The part of this workshop that caused difficulty was reading from a file, as I was used to having the file handed to me already opened I had to relearn how to make use of the ifstream to open the file, bring the pointer back to the start of the file, and close the file. Reading the previous material and looking at code examples helped me solve it. 

The second challenging part was on the findMatches function I had to return a TennisLog object but was not quite understanding how could do that. At first, I tried creating an array of TennisLog, but couldn't return that, then tried creating an array of TennisMatch only, but also had problems with the return. I had to sit and study my function and re-read it multiple times until I finally understood what should be done. 

The reason move operations are faster than copy is because, in a move operator, we simply transfer the pointers from one object (source) to another (destination) so now the destination object can point to where that data is being stored. On the copy operation, we are transferring the entire set of data, and the more data the more time will take. So only transferring the pointers will make it faster than transferring data.

My approach was, to open the file, read it and keep count, assign memory proportional to the count, reset the pointer to the beginning of the file, and read line by line again but now put it in their respective position on the new memory assigned. Maybe, and this is just a guess, to avoid re-reading the file we could do something similar to what the addMatch is doing to read line by line and consecutively add them to our obj with the help of a temp object. Maybe this approach combined with move operations can make the process faster than what we are originally doing...

In lay terms, we can say that steady_clock is a chronometer intended for measuring time regardless of what time it is. system_clock is a reference to our times, the time my computer would give whenever the function started. We should use system_clock when we want to measure time with more precision, such as how long it took for our function to perform a certain task in our case, and use system_clock when we want to measure something that is related to the time now, duration of rain for example. 
